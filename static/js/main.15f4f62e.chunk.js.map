{"version":3,"sources":["Navbar.js","Box.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","onNewGame","react_default","a","createElement","onClick","Box","props","style","showing","backgroundColor","borderColor","className","BoxState","HIDING","SHOWING","MATCHING","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","boxes","id","boxState","Shuffle","state","noClick","handleClick","bind","assertThisInitialized","handleNewGame","map","b","objectSpread","setState","_this2","mapBoxState","idsToChange","newBoxState","includes","foundBox","find","showingBoxes","filter","ids","length","hidingBoxes","setTimeout","_this3","src_Box_0","key","src_Navbar_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15f4f62e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nconst Navbar = ({onNewGame}) => (\n  <header>\n    <h2><a>Javier's Memory Game</a></h2>\n    <nav>\n      <li><a onClick={onNewGame}>New Game</a></li>\n    </nav>\n  </header>\n);\n    \nNavbar.propTypes = {\n  onNewGame: PropTypes.func.isRequired\n}\n\nexport default Navbar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Box.css';\n\n\nconst Box = (props) => {\n  let style = {};\n  if (props.showing) {\n    style.backgroundColor = props.backgroundColor;\n    style.borderColor = props.borderColor;\n  }\n  \n  return (\n    <div \n      onClick= {props.onClick} \n      className=\"box\" \n      style={style}\n    />\n  );\n  \n}\n\n\nBox.propTypes = {\n  backgroundColor: PropTypes.string.isRequired,\n  borderColor: PropTypes.string,\n  showing: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Box;","import React, {Component} from 'react';\nimport Shuffle from 'shuffle-array';\nimport Navbar from './Navbar';\nimport Box from './Box';\nimport './App.css';\n\n\n//Each box can be either hiding, showing or matching, hence the following 3 states:\nconst BoxState = {\n  HIDING: 0,\n  SHOWING: 1,\n  MATCHING: 2\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    let boxes = [\n      {id:0, boxState: BoxState.HIDING, backgroundColor: 'red', borderColor: 'grey'},\n      {id:1, boxState: BoxState.HIDING, backgroundColor: 'red', borderColor: 'grey'},\n      {id:2, boxState: BoxState.HIDING, backgroundColor: 'navy', borderColor: 'grey'},\n      {id:3, boxState: BoxState.HIDING, backgroundColor: 'navy', borderColor: 'grey'},\n      {id:4, boxState: BoxState.HIDING, backgroundColor: 'green', borderColor: 'grey'},\n      {id:5, boxState: BoxState.HIDING, backgroundColor: 'green', borderColor: 'grey'},\n      {id:6, boxState: BoxState.HIDING, backgroundColor: 'yellow', borderColor: 'grey'},\n      {id:7, boxState: BoxState.HIDING, backgroundColor: 'yellow', borderColor: 'grey'},\n      {id:8, boxState: BoxState.HIDING, backgroundColor: 'black', borderColor: 'grey'},\n      {id:9, boxState: BoxState.HIDING, backgroundColor: 'black', borderColor: 'grey'},\n      {id:10, boxState: BoxState.HIDING, backgroundColor: 'purple', borderColor: 'grey'},\n      {id:11, boxState: BoxState.HIDING, backgroundColor: 'purple', borderColor: 'grey'},\n      {id:12, boxState: BoxState.HIDING, backgroundColor: 'pink', borderColor: 'grey'},\n      {id:13, boxState: BoxState.HIDING, backgroundColor: 'pink', borderColor: 'grey'},\n      {id:14, boxState: BoxState.HIDING, backgroundColor: 'lightskyblue', borderColor: 'grey'},\n      {id:15, boxState: BoxState.HIDING, backgroundColor: 'lightskyblue', borderColor: 'grey'}\n    ];\n    \n    boxes= Shuffle(boxes);\n    this.state = {boxes, noClick:false};\n    \n    this.handleClick = this.handleClick.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this);\n  }\n  \n  handleNewGame() {\n    let boxes = this.state.boxes.map(b => ({\n      ...b,\n      boxState: BoxState.HIDING\n    }));\n    boxes = Shuffle(boxes);\n    this.setState({boxes});\n  }\n  \n  handleClick(id) {\n    const mapBoxState = (boxes, idsToChange, newBoxState) => {\n      return boxes.map(b => {\n        if (idsToChange.includes(b.id) && newBoxState !== BoxState.MATCHING) {\n          return{\n            ...b,\n            boxState: newBoxState\n          };\n        } else if (idsToChange.includes(b.id) && newBoxState === BoxState.MATCHING){\n          return{\n            ...b,\n            backgroundColor: 'white',\n            borderColor:'white',\n            boxState: newBoxState\n          };\n        }\n      return b;\n      });\n    }\n    \n    const foundBox = this.state.boxes.find(b => b.id === id);\n    \n    if (this.state.noClick || foundBox.boxState !== BoxState.HIDING) {\n      return;\n    }\n    \n    let noClick = false; //We use this to decide if the user can click again or not.\n    \n    let boxes = mapBoxState(this.state.boxes, [id], BoxState.SHOWING);\n    \n    const showingBoxes = boxes.filter((b) => b.boxState === BoxState.SHOWING);\n    \n    const ids = showingBoxes.map(b => b.id);\n    \n    if (showingBoxes.length === 2 && \n        showingBoxes[0].backgroundColor === showingBoxes[1].backgroundColor) {\n      boxes = mapBoxState(boxes, ids, BoxState.MATCHING);\n      \n    } else if(showingBoxes.length ===2) {\n      let hidingBoxes = mapBoxState(boxes, ids, BoxState.HIDING);\n      noClick = true;\n      \n      this.setState({boxes, noClick}, () => {\n        setTimeout(() => {\n          //this timeout is to wait for a certain time before making the boxes dissapear\n          this.setState({boxes: hidingBoxes, noClick: false});\n        }, 1300);\n      });\n      return;\n    }\n    \n    this.setState({boxes, noClick});\n  }\n  \n  render() {\n    const boxes = this.state.boxes.map((b) => (\n      <Box \n        key={b.id} \n        showing={b.boxState !== BoxState.HIDING} \n        backgroundColor={b.backgroundColor}\n        borderColor={b.borderColor}\n        onClick={()=>this.handleClick(b.id)}\n      /> \n    ));\n    \n    return (\n      <div>\n        <Navbar onNewGame={this.handleNewGame} />\n        {boxes}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}